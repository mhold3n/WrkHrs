version: "3.9"
name: ai-stack
networks:
  llm_net: {}

volumes:
  qdrant_data: {}
  rag_cache: {}
  models: {}
  plugins: {}
  mcp_data: {}
  logs: {}
  gateway_state: {}

services:
  gateway-api:
    build:
      context: ..
      dockerfile: docker/gateway/Dockerfile
    env_file: [ ../.env ]
    networks: [ llm_net ]
    ports: [ "${GATEWAY_PORT}:8000" ]
    depends_on: [ orchestrator ]
    volumes:
      - "gateway_state:/state"
      - "logs:/logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 10

  orchestrator:
    build:
      context: ..
      dockerfile: docker/orchestrator/Dockerfile
    env_file: [ ../.env ]
    networks: [ llm_net ]
    ports: [ "${ORCH_PORT}:8000" ]
    depends_on: [ tool-registry, rag-api, asr-api, llm-runner ]
    volumes:
      - "logs:/logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 10

  tool-registry:
    build:
      context: ..
      dockerfile: docker/tool-registry/Dockerfile
    env_file: [ ../.env ]
    networks: [ llm_net ]
    ports: [ "${TOOLS_PORT}:8000" ]
    volumes:
      - "plugins:/plugins:rw"
      - "logs:/logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 10

  mcp:
    build:
      context: ..
      dockerfile: docker/mcp/Dockerfile
    env_file: [ ../.env ]
    networks: [ llm_net ]
    ports: [ "${MCP_PORT}:8000" ]
    volumes:
      - "mcp_data:/data:rw"
      - "logs:/logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 10

  qdrant:
    image: qdrant/qdrant:latest
    networks: [ llm_net ]
    ports: [ "${QDRANT_PORT}:6333" ]
    volumes:
      - "qdrant_data:/qdrant/storage"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:6333/ready"]
      interval: 10s
      timeout: 3s
      retries: 10

  rag-api:
    build:
      context: ..
      dockerfile: docker/rag/Dockerfile
    env_file: [ ../.env ]
    networks: [ llm_net ]
    ports: [ "${RAG_PORT}:8000" ]
    depends_on: [ qdrant ]
    volumes:
      - "rag_cache:/cache"
      - "logs:/logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 10

  asr-api:
    build:
      context: ..
      dockerfile: docker/asr/Dockerfile
    env_file: [ ../.env ]
    networks: [ llm_net ]
    ports: [ "${ASR_PORT}:8000" ]
    volumes:
      - "logs:/logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 10

  # This is a placeholder - will be overridden in dev/prod
  llm-runner:
    image: ollama/ollama:latest
    networks: [ llm_net ]
    ports: [ "11434:11434" ]
    volumes:
      - "models:/models"
    environment:
      - OLLAMA_KEEP_ALIVE=24h
    healthcheck:
      test: ["CMD", "sh", "-c", "(curl -sf http://localhost:11434/api/tags || curl -sf http://localhost:8000/health)"]
      interval: 15s
      timeout: 5s
      retries: 20