{"prompt": "def fibonacci(n):\n    \"\"\"Calculate the nth Fibonacci number\"\"\"\n    ", "completion": "if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "task": "code_completion"}
{"prompt": "class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        ", "completion": "self.items.append(item)\n    \n    def pop(self):\n        if self.is_empty():\n            raise IndexError(\"Stack is empty\")\n        return self.items.pop()\n    \n    def is_empty(self):\n        return len(self.items) == 0", "task": "code_completion"}
{"prompt": "Review this code for potential issues:\n\ndef divide(a, b):\n    return a / b", "completion": "This code has a potential division by zero error. Consider adding a check:\n\ndef divide(a, b):\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return a / b", "task": "code_review"}
{"prompt": "Add documentation to this function:\n\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "completion": "def binary_search(arr, target):\n    \"\"\"\n    Perform binary search on a sorted array.\n    \n    Args:\n        arr (list): Sorted array to search in\n        target: Value to search for\n    \n    Returns:\n        int: Index of target if found, -1 otherwise\n    \n    Time Complexity: O(log n)\n    Space Complexity: O(1)\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "task": "documentation"}
