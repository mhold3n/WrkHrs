{"content": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result", "documentation": "\n\"\"\"\nMerge Sort Implementation\n\nThis module implements the merge sort algorithm, a divide-and-conquer\nsorting algorithm with O(n log n) time complexity.\n\nFunctions:\n    merge_sort(arr): Sorts an array using merge sort algorithm\n    merge(left, right): Merges two sorted arrays into one sorted array\n\nArgs:\n    arr (list): The array to be sorted\n\nReturns:\n    list: A new sorted array\n\nExample:\n    >>> arr = [64, 34, 25, 12, 22, 11, 90]\n    >>> sorted_arr = merge_sort(arr)\n    >>> print(sorted_arr)\n    [11, 12, 22, 25, 34, 64, 90]\n\"\"\"\n", "language": "python", "source": "documentation"}
